# main.py
import logging
from datetime import datetime, timedelta, time
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —á–∞—Å—É
from config import BOT_TOKEN, WHITELIST, REMINDER_TIME, QUESTION_TIME 
from sheets import save_answers, get_yesterday_answers
# –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ questions.py —ñ—Å–Ω—É—î
from questions import QUESTIONS 

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É (user_states) —Ç–∞ —ñ–º–µ–Ω (user_names)
user_states = {} 
user_names = {} 

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î /start. –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø —ñ –∑–∞–ø—É—Å–∫–∞—î –†–ï–Ñ–°–¢–†–ê–¶–Ü–Æ –Ü–ú–ï–ù–Ü, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ."""
    user_id = update.effective_user.id
    
    if user_id not in WHITELIST:
        await update.message.reply_text("‚õîÔ∏è –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    if user_id in user_names:
        # üåü –Ø–∫—â–æ —ñ–º'—è –≤–∂–µ —î (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è)
        await update.message.reply_text(f"üëã –í—ñ—Ç–∞—î–º–æ, {user_names[user_id]}! –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –û—á—ñ–∫—É–π—Ç–µ —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —ñ–º–µ–Ω—ñ
    user_states[user_id] = {"state": "awaiting_name"}
    
    await update.message.reply_text(
        "‚úÖ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –í–∞—à–µ —ñ–º'—è –∞–±–æ –ø—Å–µ–≤–¥–æ–Ω—ñ–º, —è–∫–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —É –∑–≤—ñ—Ç–∞—Ö:"
    )

async def remind_yesterday_job(context: ContextTypes.DEFAULT_TYPE):
    """–©–æ–¥–µ–Ω–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —ó—Ö–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞ –≤—á–æ—Ä–∞."""
    yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
    for user_id in WHITELIST:
        answers = get_yesterday_answers(user_id, yesterday)
        if answers:
            text = f"üìã –í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞ {yesterday}:\n" + "\n".join(answers)
            await context.bot.send_message(chat_id=user_id, text=text)

async def ask_questions_job(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞—î –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ª–∏—à–µ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤ —ñ–º'—è."""
    logger.info("üîî –ó–∞–ø—É—Å–∫–∞—é ask_questions_job")
    for user_id in WHITELIST:
        
        if user_id not in user_names: 
            await context.bot.send_message(
                chat_id=user_id, 
                text="‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å /start —ñ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ —Å–≤–æ—î —ñ–º'—è, —â–æ–± –ø–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è."
            )
            continue
        
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
            user_states[user_id] = {"answers": [], "step": 0, "edit_index": None, "state": "ready"}
            await send_question(user_id, context)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è {user_id}: {e}")

async def send_question(user_id, context):
    try:
        step = user_states[user_id]["step"]
        if step < len(QUESTIONS):
            await context.bot.send_message(chat_id=user_id, text=QUESTIONS[step])
        else:
            await show_summary(user_id, context)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ send_question –¥–ª—è {user_id}: {e}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –∫–µ—Ä—É—î –ª–æ–≥—ñ–∫–æ—é —Å—Ç–∞–Ω—É."""
    user_id = update.effective_user.id
    answer = update.message.text
    user_state = user_states.get(user_id)

    if not user_state:
        if user_id in WHITELIST:
            await update.message.reply_text("–ù–µ —Ä–æ–∑—É–º—ñ—é —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. –î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å /start.")
        return

    # 1. –õ–û–ì–Ü–ö–ê –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –Ü–ú–ï–ù–Ü
    if user_state.get("state") == "awaiting_name":
        user_name_input = answer.strip()
        user_names[user_id] = user_name_input
        
        await update.message.reply_text(
            f"üëç –î—è–∫—É—é, {user_name_input}! –í–∞—à–µ —ñ–º'—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."
        )
        user_states.pop(user_id, None) 
        return

    # 2. –õ–û–ì–Ü–ö–ê –†–ï–ñ–ò–ú–£ –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø
    if user_state["edit_index"] is not None:
        index_to_edit = user_state["edit_index"]
        user_state["answers"][index_to_edit] = answer
        user_state["edit_index"] = None
        
        await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        await show_summary(user_id, context)
        return

    # 3. –õ–û–ì–Ü–ö–ê –¶–ò–ö–õ–£ –û–ü–ò–¢–£–í–ê–ù–ù–Ø
    if user_state.get("state") == "ready" and user_state["step"] < len(QUESTIONS):
        user_state["answers"].append(answer)
        user_state["step"] += 1

        if user_state["step"] < len(QUESTIONS):
            await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–π–Ω—è—Ç–æ.")
            await send_question(user_id, context)
        else:
            await update.message.reply_text("‚úÖ –í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ.")
            await show_summary(user_id, context)

async def show_summary(user_id, context):
    answers = user_states[user_id]["answers"]
    summary = "\n".join([f"{i+1}. {QUESTIONS[i].split(':')[0]}: {a}" for i, a in enumerate(answers)])
    
    buttons = [[InlineKeyboardButton(f"üîÑ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ {i+1}", callback_data=f"edit_{i}")] for i in range(len(answers))]
    buttons.append([InlineKeyboardButton("‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ", callback_data="confirm")])
    
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üìã –í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n{summary}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def edit_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    index_to_edit = int(query.data.split("_")[1])
    user_states[user_id]["edit_index"] = index_to_edit
    
    question_text = QUESTIONS[index_to_edit].split(':')[0] 
    await query.edit_message_text(f"‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è '{question_text}':")

async def confirm_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if user_id not in user_states or not user_states[user_id].get("answers"):
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
        return

    user_name = user_names.get(user_id, f"ID: {user_id}") 
    date = datetime.now().strftime("%Y-%m-%d")
    
    try:
        save_answers(user_id, user_name, date, user_states[user_id]["answers"]) 
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –í–ò–ö–õ–ò–ö–£ save_answers: {e}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await query.edit_message_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!")
    user_states.pop(user_id, None)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Exception occurred: %s", context.error)

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    job_queue = app.job_queue

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(edit_answer, pattern=r"^edit_\d$"))
    app.add_handler(CallbackQueryHandler(confirm_answers, pattern="^confirm$"))
    app.add_error_handler(error_handler)

    tz = pytz.timezone("Europe/Kyiv")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—É –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    remind_hour, remind_minute = map(int, REMINDER_TIME.split(':'))
    question_hour, question_minute = map(int, QUESTION_TIME.split(':'))
    
    # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤—á–æ—Ä–∞—à–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    job_queue.run_daily(remind_yesterday_job, 
                        time=time(hour=remind_hour, minute=remind_minute, tzinfo=tz), 
                        days=(0, 1, 2, 3, 4, 5, 6))
                        
    # –ó–∞–ø—É—Å–∫ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    job_queue.run_daily(ask_questions_job, 
                        time=time(hour=question_hour, minute=question_minute, tzinfo=tz), 
                        days=(0, 1, 2, 3, 4, 5, 6))

    await app.run_polling()

if __name__ == "__main__":
    import asyncio, nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())